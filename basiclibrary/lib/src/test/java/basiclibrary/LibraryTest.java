/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }

    @Test
    void testRoll() {
        int n = 5;
        int[] result = Library.roll(n);

        assertEquals(n, result.length, "Incorrect array length");

        for (int value : result) {
            assertTrue(value >= 0 && value <= 6, "Value out of range: " + value);
        }

    }

    @Test
    void testContainsDuplicatesWithDuplicates() {
        int[] arrWithDuplicates = {1, 2, 3, 4, 5, 2};
        assertTrue(Library.containsDuplicates(arrWithDuplicates), "Array contains duplicates");
    }

    @Test
    void testContainsDuplicatesWithoutDuplicates() {
        int[] arrWithoutDuplicates = {1, 2, 3, 4, 5};
        assertFalse(Library.containsDuplicates(arrWithoutDuplicates), "Array doesn't contain duplicates");
    }

    @Test
    void testCalculatingAverages() {
        int[] arr = {10, 20, 30, 40, 50};
        int expectedAverage = 30; // (10 + 20 + 30 + 40 + 50) / 5 = 30

        int calculatedAverage = Library.calculatingAverages(arr);
        assertEquals(expectedAverage, calculatedAverage, "Average calculation is incorrect");
    }

    @Test
    void testFindLowestAverageIndex() {
        int[][] arrays = {
                {10, 20, 30},
                {5, 15, 25},
                {8, 16, 24}
        };
        int expectedIndex = 1; // The second array has the lowest average

        int calculatedIndex = Library.findLowestAverageIndex(arrays);
        assertEquals(expectedIndex, calculatedIndex, "Incorrect index with lowest average");
    }

    @Test
    void testCalculateAverage() {
        int[] array = {10, 20, 30};
        double expectedAverage = 20.0;

        double calculatedAverage = Library.calculateAverage(array);
        assertEquals(expectedAverage, calculatedAverage, 0.001, "Average calculation is incorrect");
    }
}
